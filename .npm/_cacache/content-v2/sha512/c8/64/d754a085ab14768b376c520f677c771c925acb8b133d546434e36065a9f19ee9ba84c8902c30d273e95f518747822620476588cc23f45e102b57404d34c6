{"_id":"@fastify/merge-json-schemas","_rev":"2-6d22cd2cefd8250ccf29e74526aee49e","name":"@fastify/merge-json-schemas","dist-tags":{"latest":"0.1.1"},"versions":{"0.1.0":{"name":"@fastify/merge-json-schemas","version":"0.1.0","description":"Builds a logical conjunction (AND) of multiple JSON schemas","main":"index.js","type":"commonjs","types":"types/index.d.ts","scripts":{"lint":"standard","lint:fix":"standard --fix","test:unit":"c8 --100 node --test","test:types":"tsd","test":"npm run lint && npm run test:unit && npm run test:types"},"repository":{"type":"git","url":"git+https://github.com/fastify/merge-json-schemas.git"},"keywords":["json","schema","merge","allOf"],"author":{"name":"Ivan Tymoshenko","email":"ivan@tymoshenko.me"},"license":"MIT","bugs":{"url":"https://github.com/fastify/merge-json-schemas/issues"},"homepage":"https://github.com/fastify/merge-json-schemas#readme","devDependencies":{"c8":"^8.0.1","standard":"^17.1.0","tsd":"^0.30.3"},"dependencies":{"fast-deep-equal":"^3.1.3"},"_id":"@fastify/merge-json-schemas@0.1.0","gitHead":"3e43524cc93f811555739c1620c8fb01bedfe23a","_nodeVersion":"20.11.0","_npmVersion":"10.2.4","dist":{"integrity":"sha512-S5T0Qx3P/t/EpKs+o8UJe4gb73Fz/Hv5YoTOTD3nRPGa4/UGIhXR1AAOsAMWFG8WAZy1WTvj5tI0+x+UZAAz7A==","shasum":"ff175d13a16f322736aaac621dd7fcb0bb3349ea","tarball":"https://registry.npmjs.org/@fastify/merge-json-schemas/-/merge-json-schemas-0.1.0.tgz","fileCount":50,"unpackedSize":100994,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQClfdLzaE5MRVux3I0oD7lKu6Lv1JTn8y7K1I/bomznwAIhALjaBTK0Mc4t2xnUKvdjbL+HtzFaD5p+ULGrF1i5m088"}]},"_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"directories":{},"maintainers":[{"name":"gurgunday","email":"gurgun.dayioglu@icloud.com"},{"name":"metcoder95","email":"me@metcoder.dev"},{"name":"galvez","email":"jonasgalvez@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"coopflow","email":"community@coopflow.com"},{"name":"simoneb","email":"simone.busoli@gmail.com"},{"name":"rafaelgss","email":"rafael.nunu@hotmail.com"},{"name":"starptech","email":"deusdustin@gmail.com"},{"name":"delvedor","email":"tommydelved@gmail.com"},{"name":"matteo.collina","email":"hello@matteocollina.com"},{"name":"allevo","email":"tomallevi@gmail.com"},{"name":"jsumners","email":"james.sumners@gmail.com"},{"name":"zekth","email":"vince.legoff@gmail.com"},{"name":"eomm","email":"behemoth89@gmail.com"},{"name":"fox1t","email":"maksim@sinik.it"},{"name":"airhorns","email":"harry@harry.me"},{"name":"kibertoad","email":"iselwin@gmail.com"},{"name":"climba03003","email":"kaka@kakawebsitedemo.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/merge-json-schemas_0.1.0_1705419542435_0.8764459782311311"},"_hasShrinkwrap":false},"0.1.1":{"name":"@fastify/merge-json-schemas","version":"0.1.1","description":"Builds a logical conjunction (AND) of multiple JSON schemas","main":"index.js","type":"commonjs","types":"types/index.d.ts","scripts":{"lint":"standard","lint:fix":"standard --fix","test:unit":"c8 --100 node --test","test:types":"tsd","test":"npm run lint && npm run test:unit && npm run test:types"},"repository":{"type":"git","url":"git+https://github.com/fastify/merge-json-schemas.git"},"keywords":["json","schema","merge","allOf"],"author":{"name":"Ivan Tymoshenko","email":"ivan@tymoshenko.me"},"license":"MIT","bugs":{"url":"https://github.com/fastify/merge-json-schemas/issues"},"homepage":"https://github.com/fastify/merge-json-schemas#readme","devDependencies":{"c8":"^8.0.1","standard":"^17.1.0","tsd":"^0.30.3"},"dependencies":{"fast-deep-equal":"^3.1.3"},"_id":"@fastify/merge-json-schemas@0.1.1","gitHead":"8f46867bec724bad9cd427ecf7c4825ead295cd4","_nodeVersion":"20.11.0","_npmVersion":"10.2.4","dist":{"integrity":"sha512-fERDVz7topgNjtXsJTTW1JKLy0rhuLRcquYqNR9rF7OcVpCa2OVW49ZPDIhaRRCaUuvVxI+N416xUoF76HNSXA==","shasum":"3551857b8a17a24e8c799e9f51795edb07baa0bc","tarball":"https://registry.npmjs.org/@fastify/merge-json-schemas/-/merge-json-schemas-0.1.1.tgz","fileCount":50,"unpackedSize":101012,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGYFAHAXXdLtMOyxWakee2gqDbJPo7+ebGmd6VjXuLSWAiEA7/H/EMON4evhePddUTr6qDTIWiburC4K7AfmV05VUbk="}]},"_npmUser":{"name":"matteo.collina","email":"hello@matteocollina.com"},"directories":{},"maintainers":[{"name":"gurgunday","email":"gurgun.dayioglu@icloud.com"},{"name":"metcoder95","email":"me@metcoder.dev"},{"name":"galvez","email":"jonasgalvez@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"coopflow","email":"community@coopflow.com"},{"name":"simoneb","email":"simone.busoli@gmail.com"},{"name":"rafaelgss","email":"rafael.nunu@hotmail.com"},{"name":"starptech","email":"deusdustin@gmail.com"},{"name":"delvedor","email":"tommydelved@gmail.com"},{"name":"matteo.collina","email":"hello@matteocollina.com"},{"name":"allevo","email":"tomallevi@gmail.com"},{"name":"jsumners","email":"james.sumners@gmail.com"},{"name":"zekth","email":"vince.legoff@gmail.com"},{"name":"eomm","email":"behemoth89@gmail.com"},{"name":"fox1t","email":"maksim@sinik.it"},{"name":"airhorns","email":"harry@harry.me"},{"name":"kibertoad","email":"iselwin@gmail.com"},{"name":"climba03003","email":"kaka@kakawebsitedemo.com"},{"name":"ivan-tymoshenko","email":"ivan@tymoshenko.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/merge-json-schemas_0.1.1_1705419667696_0.8117343245874205"},"_hasShrinkwrap":false}},"time":{"created":"2024-01-16T15:39:02.284Z","0.1.0":"2024-01-16T15:39:02.623Z","modified":"2024-01-16T15:41:08.176Z","0.1.1":"2024-01-16T15:41:07.834Z"},"maintainers":[{"name":"gurgunday","email":"gurgun.dayioglu@icloud.com"},{"name":"metcoder95","email":"me@metcoder.dev"},{"name":"galvez","email":"jonasgalvez@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"coopflow","email":"community@coopflow.com"},{"name":"simoneb","email":"simone.busoli@gmail.com"},{"name":"rafaelgss","email":"rafael.nunu@hotmail.com"},{"name":"starptech","email":"deusdustin@gmail.com"},{"name":"delvedor","email":"tommydelved@gmail.com"},{"name":"matteo.collina","email":"hello@matteocollina.com"},{"name":"allevo","email":"tomallevi@gmail.com"},{"name":"jsumners","email":"james.sumners@gmail.com"},{"name":"zekth","email":"vince.legoff@gmail.com"},{"name":"eomm","email":"behemoth89@gmail.com"},{"name":"fox1t","email":"maksim@sinik.it"},{"name":"airhorns","email":"harry@harry.me"},{"name":"kibertoad","email":"iselwin@gmail.com"},{"name":"climba03003","email":"kaka@kakawebsitedemo.com"},{"name":"ivan-tymoshenko","email":"ivan@tymoshenko.me"}],"description":"Builds a logical conjunction (AND) of multiple JSON schemas","homepage":"https://github.com/fastify/merge-json-schemas#readme","keywords":["json","schema","merge","allOf"],"repository":{"type":"git","url":"git+https://github.com/fastify/merge-json-schemas.git"},"author":{"name":"Ivan Tymoshenko","email":"ivan@tymoshenko.me"},"bugs":{"url":"https://github.com/fastify/merge-json-schemas/issues"},"license":"MIT","readme":"# @fastify/merge-json-schema\n\n__merge-json-schema__ is a javascript library that build a logical product (AND) for multiple [JSON schemas](https://json-schema.org/draft/2020-12/json-schema-core#name-introduction).\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [API](#api)\n  - [mergeSchemas(schemas, options)](#mergeschemasschemas-options)\n  - [resolvers](#resolvers)\n  - [defaultResolver](#defaultresolver)\n- [License](#license)\n\n<a name=\"installation\"></a>\n\n## Installation\n\n```bash\nnpm install @fastify/merge-json-schema\n```\n\n<a name=\"usage\"></a>\n\n## Usage\n\n```javascript\nconst assert = require('node:assert')\nconst { mergeSchemas } = require('merge-json-schema')\n\nconst schema1 = {\n  $id: 'schema1',\n  type: 'object',\n  properties: {\n    foo: { type: 'string', enum: ['foo1', 'foo2'] },\n    bar: { type: 'string', minLength: 3 }\n  }\n}\n\nconst schema2 = {\n  $id: 'schema1',\n  type: 'object',\n  properties: {\n    foo: { type: 'string', enum: ['foo1', 'foo3'] },\n    bar: { type: 'string', minLength: 5 }\n  },\n  required: ['foo']\n}\n\nconst mergedSchema = mergeSchemas([schema1, schema2])\nassert.deepStrictEqual(mergedSchema, {\n  $id: 'schema1',\n  type: 'object',\n  properties: {\n    foo: { type: 'string', enum: ['foo1'] },\n    bar: { type: 'string', minLength: 5 }\n  },\n  required: ['foo']\n})\n```\n\n<a name=\"api\"></a>\n\n## API\n\n<a name=\"merge-schemas\"></a>\n\n#### mergeSchemas(schemas, options)\n\nBuilds a logical conjunction (AND) of multiple [JSON schemas](https://json-schema.org/draft/2020-12/json-schema-core#name-introduction).\n\n- `schemas` __\\<objects[]\\>__ - list of JSON schemas to merge.\n- `options` __\\<object\\>__ - optional options.\n  - `resolvers` __\\<object\\>__ - custom resolvers for JSON schema keywords. Each key is the name of a JSON schema keyword. Each value is a resolver function. See [keywordResolver](#keywordresolver-keyword-values-mergedschema-parentschemas-options).\n  - `defaultResolver` __\\<function\\>__ - custom default resolver for JSON schema keywords. See [keywordResolver](#keywordresolver-keyword-values-mergedschema-parentschemas-options).\n  - `onConflict` __\\<string\\>__ - action to take when a conflict is found. Used by the default `defaultResolver`. Default is `throw`. Possible values are:\n    - `throw` - throws an error if found a multiple different schemas for the same keyword.\n    - `ignore` - do nothing if found a multiple different schemas for the same keyword.\n    - `first` - use the value of the first schema if found a multiple different schemas for the same keyword.\n\n#### resolvers\n\nA list of default resolvers that __merge-json-schema__ uses to merge JSON schemas. You can override the default resolvers by passing a list of custom resolvers in the `options` argument of `mergeSchemas`. See [keywordResolver](#keywordresolver-keyword-values-mergedschema-parentschemas-options).\n\n#### defaultResolver\n\nA default resolver that __merge-json-schema__ uses to merge JSON schemas. Default resolver is used when no custom resolver is defined for a JSON schema keyword. By default, the default resolver works as follows:\n\n- If only one schema contains the keyword, the value of the keyword is used as the merged value.\n- If multiple schemas contain the exact same value for the keyword, the value of the keyword is used as the merged value.\n- If multiple schemas contain different values for the keyword, it throws an error.\n\n#### keywordResolver (keyword, values, mergedSchema, parentSchemas, options)\n\n__merge-json-schema__ uses a set of resolvers to merge JSON schemas. Each resolver is associated with a JSON schema keyword. The resolver is called when the keyword is found in the schemas to merge. The resolver is called with the following arguments:\n\n- `keyword` __\\<string\\>__ - the name of the keyword to merge.\n- `values` __\\<any[]\\>__ - the values of the keyword to merge. The length of the array is equal to the number of schemas to merge. If a schema does not contain the keyword, the value is `undefined`.\n- `mergedSchema` __\\<object\\>__ - an instance of the merged schema.\n- `parentSchemas` __\\<object[]\\>__ - the list of parent schemas.\n- `options` __\\<object\\>__ - the options passed to `mergeSchemas`.\n\nThe resolver must set the merged value of the `keyword` in the `mergedSchema` object.\n\n__Example:__ resolver for the `minNumber` keyword.\n\n```javascript\nfunction minNumberResolver (keyword, values, mergedSchema) {\n  mergedSchema[keyword] = Math.min(...values)\n}\n```\n\n<a name=\"license\"></a>\n\n## License\n\nMIT\n","readmeFilename":"README.md"}